AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Recipe API"

Globals:
  Function:
    Runtime: python3.7
    Timeout: 30
    CodeUri: src/

Resources:
  RecipesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
#      Cors: "'*'"
#      Auth:
#        DefaultAuthorizer: CognitoAuthorizer
#        Authorizers:
#          CognitoAuthorizer:
#            UserPoolArn: !GetAtt UserPool.Arn
#      GatewayResponses:
#        UNAUTHORIZED:
#          StatusCode: 401
#          ResponseParameters:
#            Headers:
#              Access-Control-Expose-Headers: "'WWW-Authenticate'"
#              Access-Control-Allow-Origin: "'*'"
#              WWW-Authenticate: >-
#                'Bearer realm="admin"'

  # ============================== Auth =============================
#  UserPool:
#    Type: AWS::Cognito::UserPool
#    Properties:
#      UserPoolName: ApiUserPool
#      LambdaConfig:
#        PreSignUp: !GetAtt PreSignupFunction.Arn
#      Policies:
#        PasswordPolicy:
#          MinimumLength: 6
#
#  UserPoolClient:
#    Type: AWS::Cognito::UserPoolClient
#    Properties:
#      UserPoolId: !Ref UserPool
#      ClientName: ApiUserPoolClient
#      GenerateSecret: no
#
#  PreSignupFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      InlineCode: |
#        exports.handler = async event => {
#          event.response = { autoConfirmUser: true };
#          return event;
#        };
#
#  LambdaCognitoUserPoolExecutionPermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: lambda:InvokeFunction
#      FunctionName: !GetAtt PreSignupFunction.Arn
#      Principal: cognito-idp.amazonaws.com
#      SourceArn: !Sub "arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
#
  RecipeGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: recipe.get
#      Environment:
#        Variables:
#          USER_POOL_ID: !Ref UserPool
#          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        RecipeGetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RecipesApi
            Path: /recipes/{slug}
            Method: GET
#            Auth:
#              Authorizer: NONE
#        Signin:
#          Type: Api
#          Properties:
#            RestApiId: !Ref ServerlessApi
#            Path: /signin
#            Method: POST
#            Auth:
#              Authorizer: NONE

Outputs:
  ApiUrl:
    Description: The target URL of the created API
    Value: !Sub "https://${RecipesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: ApiUrl